// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package projectx.sk.com.tripbook.dependencyinjection;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import projectx.sk.com.tripbook.TripBookApplication;

public final class ApplicationModule_ProvideTripBookApplicationFactory
    implements Factory<TripBookApplication> {
  private final ApplicationModule module;

  public ApplicationModule_ProvideTripBookApplicationFactory(ApplicationModule module) {
    this.module = module;
  }

  @Override
  public TripBookApplication get() {
    return Preconditions.checkNotNull(
        module.provideTripBookApplication(),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<TripBookApplication> create(ApplicationModule module) {
    return new ApplicationModule_ProvideTripBookApplicationFactory(module);
  }

  public static TripBookApplication proxyProvideTripBookApplication(ApplicationModule instance) {
    return instance.provideTripBookApplication();
  }
}
